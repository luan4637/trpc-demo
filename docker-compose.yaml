version: '0.01'
services:
  nginx:
    image: nginx:alpine
    ports:
      - 80:80
    volumes:
      - ./dist/out:/usr/share/nginx/html
      - ./.nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - nodejs
    networks:
      - internal
  postgres:
    image: postgres:16
    hostname: postgres
    shm_size: 128mb
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: trpc_paractice_db
      POSTGRES_USER: trpc_paractice_user
      POSTGRES_PASSWORD: trpc_paractice_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 3
  localstack:
    image: localstack/localstack:4.5.0
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      - DEBUG=${DEBUG:-0}
      - AWS_DEFAULT_REGION=us-east-1
      - DISABLE_CORS_HEADERS=1
      - EXTRA_CORS_ALLOWED_ORIGINS=*
      - EXTRA_CORS_ALLOWED_HEADERS=*
      - POSTGRES_DB=trpc_paractice_db
      - POSTGRES_USER=trpc_paractice_user
    volumes:
      - ./:/usr/share/code
      - ./.localstack/init.sh:/etc/localstack/init/ready.d/init.sh
      # - .volumes/localstack:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
  nodejs:
    image: node:lts-alpine
    volumes:
      - ./:/usr/share
      - ./.aws/credentials:/root/.aws/credentials
    ports:
      - 4000:4000
      - 4001:4001
    command:
      - sh
      - "-c"
      - |
        cd /usr/share
        # npm install
        # npm run esbuild
        # npm run build
        # npm run migrate
        npm run start
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
networks:
  internal:
    driver: bridge
